name: AI PR Review (JP)

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

      - name: Derive base/head SHAs
        id: shas
        shell: bash
        run: |
          set -euo pipefail
          BASE_SHA="${{ github.event.pull_request.base.sha || '' }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha || '' }}"
          if [ -z "$BASE_SHA" ] || [ -z "$HEAD_SHA" ]; then
            echo "[info] Fallback to last two commits"
            HEAD_SHA="$(git rev-parse HEAD)"
            BASE_SHA="$(git rev-parse HEAD~1 || echo '')"
          fi
          echo "base_sha=$BASE_SHA" >> "$GITHUB_OUTPUT"
          echo "head_sha=$HEAD_SHA" >> "$GITHUB_OUTPUT"

      - name: Build diff and file list
        id: diff
        shell: bash
        run: |
          set -euo pipefail
          BASE_SHA="${{ steps.shas.outputs.base_sha }}"
          HEAD_SHA="${{ steps.shas.outputs.head_sha }}"

          if [ -z "$HEAD_SHA" ]; then
            echo "empty_diff=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          if [ -n "$BASE_SHA" ]; then
            git fetch --no-tags --depth=1 origin "$BASE_SHA" || true
          fi

          FBASE="$BASE_SHA"
          if [ -z "$FBASE" ]; then
            if git rev-parse HEAD~1 >/dev/null 2>&1; then
              FBASE="$(git rev-parse HEAD~1)"
            else
              echo "empty_diff=true" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi

          git diff --unified=0 "$FBASE" "$HEAD_SHA" > pr.diff || true
          git diff --name-only "$FBASE" "$HEAD_SHA" | tr '\n' ' ' > files.txt || true

          if [ ! -s pr.diff ]; then
            echo "empty_diff=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          head -c 51200 pr.diff > pr_trunc.diff
          echo "files=$(cat files.txt)" >> "$GITHUB_OUTPUT"
          echo "empty_diff=false" >> "$GITHUB_OUTPUT"

      - name: Comment and exit if no diff
        if: steps.diff.outputs.empty_diff == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body: "AIレビュー: 対象となるコード差分が見つかりませんでした。"
              });
            }

      - name: Prepare prompt (Japanese)
        if: steps.diff.outputs.empty_diff != 'true'
        id: prompt
        env:
          PROMPT_JA: |
            あなたは熟練のソフトウェアレビュアです。以下の「PR差分（unified diff）」を読み、**日本語**でレビューしてください。

            # 出力（Markdown）
            - **概要**（3～6行）：最重要の改善点の要約
            - **指摘（重要度ラベル付き）**：
              - ラベル：`BLOCKER` / `MAJOR` / `MINOR` / `NICE`
              - 箇条書きで、可能なら `path:line` を明示（不明なら「行特定不可」と記載）
              - **根拠・理由**、**代替案**、**短いコード断片** を添付
            - **観点**：セキュリティ/安全性、性能、可読性/保守性、テスト（境界値/失敗系/fixture/CI）
            - **パッチ提案（任意）**：小規模修正は差分断片を Markdown で
            - **総評** と **次アクション**

            # 方針
            - 差分にないコードの詳細は仮定しない
            - 行番号やファイル名の“でっち上げ”は禁止（不明は不明と明記）
            - 冗長説明より **actionable** を優先
            - Python：I/O例外、型/None、リソース解放、pytestのfixture/capsys/tmp_path
            - C：未初期化、境界チェック、安全API、寿命/所有権、size_t/符号、errno、free/close漏れ
            - Makefile/CI：並列安定性、キャッシュ、ログの可観測性、偽陽性抑制
            - 大規模差分は危険箇所を優先し、残りはサマリ

        shell: bash
        run: |
          set -euo pipefail
          # env の複数行文字列をそのままファイルへ
          printf "%s\n" "$PROMPT_JA" > prompt.txt
          echo -e "\n---\n[変更ファイル]\n${{ steps.diff.outputs.files }}\n---\n[差分プレビュー(最大約50KB)]\n" >> prompt.txt
          cat pr_trunc.diff >> prompt.txt
          jq -Rs . < prompt.txt > prompt.json

      - name: Call OpenAI (Responses API)
        if: steps.diff.outputs.empty_diff != 'true'
        id: call
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: gpt-4o-mini
          OPENAI_BASE_URL: https://api.openai.com/v1
        shell: bash
        run: |
          set -euo pipefail
          INPUT=$(jq -Rs . < prompt.txt)
          REQ=$(jq -n \
            --arg model "$OPENAI_MODEL" \
            --arg input "$INPUT" \
            '{
              model: $model,
              input: [
                { "role": "system", "content": "あなたは一流のコードレビュアです。出力は必ず日本語で、Markdown形式で、行動可能に。" },
                { "role": "user",   "content": $input }
              ],
              temperature: 0.2
            }')

          RESP=$(curl -sS "$OPENAI_BASE_URL/responses" \
            -H "Authorization: Bearer '"$OPENAI_API_KEY"'" \
            -H "Content-Type: application/json" \
            -d "$REQ" || true)

          echo "$RESP" > openai_raw.json
          OUT=$(jq -r '.output_text // empty' openai_raw.json)
          if [ -z "$OUT" ]; then
            echo "(OpenAI API error or empty output)" > review.md
          else
            echo "$OUT" > review.md
          fi

      - name: Post review as PR comment
        if: steps.diff.outputs.empty_diff != 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('review.md', 'utf8');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body
            });

      - name: Upload artifacts (debug)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-pr-review-debug
          path: |
            prompt.txt
            prompt.json
            pr.diff
            pr_trunc.diff
            review.md
            openai_raw.json
          if-no-files-found: ignore
